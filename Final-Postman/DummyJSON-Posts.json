{
	"info": {
		"_postman_id": "9e0d6edd-de02-4c41-8308-113165ebe92a",
		"name": "DummyJSON-Posts",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "30420589",
		"_collection_link": "https://orange-shadow-385549.postman.co/workspace/qa~721d9e5e-dd8b-4a0f-879e-bc13d95f7f04/collection/30420589-9e0d6edd-de02-4c41-8308-113165ebe92a?action=share&source=collection_link&creator=30420589"
	},
	"item": [
		{
			"name": "LOG IN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Save token to Environment\", function () {\r",
							"   let responseBody = pm.response.json()\r",
							"\r",
							"   let token = responseBody.token\r",
							"   \r",
							"   pm.environment.set(\"token\",token)\r",
							"});\r",
							"\r",
							"pm.test(\"Save URL to Environment\", function () {\r",
							"   let responseBody = pm.response.json()\r",
							"\r",
							"   let baseURL = \"https://dummyjson.com\"\r",
							"   \r",
							"   pm.environment.set(\"baseURL\",baseURL)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"kminchelle\",\r\n    \"password\" : \"0lelplR\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://dummyjson.com/auth/login"
			},
			"response": []
		},
		{
			"name": "ALL POSTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response has \\'posts\\' array', function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('posts').that.is.an('array');\r",
							"})\r",
							"\r",
							"pm.test('Response has \\'total\\' number', function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('total').that.is.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Total equal to 150', function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('total').to.eq(150);\r",
							"})\r",
							"\r",
							"pm.test(\"Response JSON array has length greater than 0\", function () {\r",
							"    pm.expect(pm.response.json().posts.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test('Response Content-Type is application/json', function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/auth/posts"
			},
			"response": []
		},
		{
			"name": "POST BY ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Set postsId environment variable\", function () {\r",
							"   \r",
							"    pm.environment.set(\"postsId\", 10);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/auth/posts/10"
			},
			"response": []
		},
		{
			"name": "FILTER POSTS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Response JSON array has length less than 6\", function () {\r",
							"    pm.expect(pm.response.json().posts).to.have.lengthOf.lessThan(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/auth/posts?limit=5&skip=145&select=title,reactions,userId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth",
						"posts"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "skip",
							"value": "145"
						},
						{
							"key": "select",
							"value": "title,reactions,userId"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST BY USER ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Posts array has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.posts).to.be.an('array');\r",
							"  \r",
							"  responseData.posts.forEach(post => {\r",
							"    pm.expect(post).to.have.property('id');\r",
							"    pm.expect(post).to.have.property('title');\r",
							"    pm.expect(post).to.have.property('body');\r",
							"    pm.expect(post).to.have.property('userId');\r",
							"    pm.expect(post).to.have.property('tags');\r",
							"    pm.expect(post).to.have.property('reactions');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total field is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.total).to.exist;\r",
							"    pm.expect(responseData.total).to.be.a('number');\r",
							"    pm.expect(responseData.total).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Skip and limit fields are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.skip).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.limit).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Tags array within each post contains at least one tag\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.posts).to.be.an('array');\r",
							"    responseData.posts.forEach(function(post) {\r",
							"        pm.expect(post.tags).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Reactions field for each post is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.posts).to.be.an('array');\r",
							"    responseData.posts.forEach(function(post) {\r",
							"        pm.expect(post.reactions).to.be.a('number');\r",
							"        pm.expect(post.reactions).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/auth/posts/user/{{userId}}"
			},
			"response": []
		},
		{
			"name": "UPDATE POSTS BY ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"New title\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/auth/posts/{{postsId}}"
			},
			"response": []
		}
	]
}